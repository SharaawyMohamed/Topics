#include <bits/stdc++.h>
#include <iostream>
#include <unordered_set>
#include <unordered_map>
using namespace std;

#define test int t; cin >> t; while(t--)
#define sz(s) s.size()
#define li '\n'
#define all(a) a.begin(), a.end()
#define rall(a) a.rbegin(), a.rend()
#define ll long long
#define F first
#define S second
#define pb(a) push_back(a)
#define pf(a) push_front(a)
//#define b() back()
#define P(a) push(a);
#define fix(a) cout << fixed << setprecision(a);
#define infi 0x3F3F3F3F
#define infl 2e18
#define mem(a, val) memset(a, val, sizeof(a));
const int mod = 1e9 + 7;

void Both() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
}

template <class T, class T1>
struct SQRT {
    const int N = 2e5 + 5, SQ = 448;
    int n, q;
    vector<T> v;
    vector<T1> pref;
    vector<vector<T>> blocks;

    SQRT() : v(N), pref(SQ), blocks(SQ) {
        // This initializes the member variables with the specified sizes
    }

    void process() {
        for (int i = 0; i < n; i++) {
            blocks[i / SQ].push_back(v[i]);
            pref[i / SQ] += v[i];
        }
    }

    void update(int indx, T1 val) {
        int i = indx / SQ;
        int j = indx % SQ;
        pref[i] += (val - v[indx]);
        v[indx] = val;
        blocks[i][j] = val;
    }

    T1 query(int l, int r) {
        T1 ret = 0;
        while (l <= r) {
            if (l % SQ == 0 && l + SQ <= r) {
                ret += pref[l / SQ];
                l += SQ;
            }
            else {
                ret += v[l++];
            }
        }
        return ret;
    }
};

void solve() {
    SQRT<int, ll > sq;
    cin >> sq.n >> sq.q;
    for (int i = 0; i < sq.n; i++) {
        cin >> sq.v[i];
    }

    sq.process();

    while (sq.q--) {
        int k; cin >> k;
        if (k == 1) {
            int indx, val;
            cin >> indx >> val;
            sq.update(indx - 1, val);
        }
        else {
            int l, r;
            cin >> l >> r;
            cout << sq.query(l - 1, r - 1) << li;
        }
    }
}

int main() {
    Both();
    solve();
    return 0;
}
